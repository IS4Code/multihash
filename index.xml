<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN" "http://xml.resource.org/authoring/rfc2629.dtd" [
  <!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY rfc2617 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml">
  <!ENTITY rfc3230 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3230.xml">
  <!ENTITY rfc3447 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml">
  <!ENTITY rfc4648 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml">
  <!ENTITY rfc5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
  <!ENTITY rfc6376 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6376.xml">
  <!ENTITY rfc6749 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6749.xml">
  <!ENTITY rfc7230 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7230.xml">
  <!ENTITY rfc7235 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7235.xml">
  <!ENTITY jwa SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-jose-json-web-algorithms-20.xml">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xsl" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc toc="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc symrefs="yes" ?>
<rfc category="std" ipr="trust200902" submissionType="independent"
     docName="draft-multihash-01">
<front>
 <title>The Multihash Data Format</title>

 <author initials="J.B." surname="Benet" fullname="Juan Benet">
  <organization>Protocol Labs</organization>
  <address>
   <postal>
    <street>548 Market Street, #51207</street>
    <city>San Francisco</city> <region>CA</region>
    <code>94104</code>
    <country>US</country>
   </postal>
   <phone>+1 619 957 7606</phone>
   <email>juan@protocol.ai</email>
   <uri>http://juan.benet.ai/</uri>
  </address>
 </author>

 <author initials="M.S." surname="Sporny" fullname="Manu Sporny">
  <organization>Digital Bazaar</organization>
  <address>
   <postal>
    <street>203 Roanoke Street W.</street>
    <city>Blacksburg</city> <region>VA</region>
    <code>24060</code>
    <country>US</country>
   </postal>
   <phone>+1 540 961 4469</phone>
   <email>msporny@digitalbazaar.com</email>
   <uri>http://manu.sporny.org/</uri>
  </address>
 </author>

 <date month="August" year="2018" />
 <area>Security</area>
 <workgroup></workgroup>
 <keyword>digest algorithm</keyword>
 <keyword>digital signature</keyword>
 <keyword>PKI</keyword>
 <abstract>
  <t>
Cryptographic hash functions often have multiple output sizes and encodings.
This variability makes it difficult for applications to examine a series of
bytes and determine which hash function produced them. Multihash is a universal
data format for encoding outputs from hash functions. It is useful to write
applications that can simultaneously support different hash function outputs as
well as upgrade their use of hashes over time; Multihash is intended to
address these needs.
  </t>
 </abstract>
 <note title="Feedback">
  <t>
This specification is a joint work product of
<eref target="https://protocol.ai/">Protocol Labs</eref>,
the
<eref target="https://w3c-dvcg.github.io/">W3C Digital Verification Community Group</eref>,
and the
<eref target="https://w3c-ccg.github.io/">W3C Credentials Community Group</eref>.
Feedback related to this specification should logged in the
<eref target="https://github.com/w3c-dvcg/multihash/issues">issue tracker</eref>
or be sent to
<eref target="mailto:public-credentials@w3.org">public-credentials@w3.org</eref>.
  </t>
 </note>
</front>

<middle>

 <section anchor="intro" title="Introduction">

   <t>
Multihash is particularly important in systems which depend on
cryptographically secure hash functions. Attacks may break the cryptographic
properties of secure hash functions. These cryptographic breaks are
particularly painful in large tool ecosystems, where tools may have made
assumptions about hash values, such as function and digest size. Upgrading
becomes a nightmare, as all tools which make those assumptions would have
to be upgraded to use the new hash function and new hash digest length.
Tools may face serious interoperability problems or error-prone special casing.
   </t>

   <t>
How many programs out there assume a git hash is a sha1 hash?
   </t>

   <t>
How many scripts assume the hash value digest is exactly 160 bits?
   </t>

   <t>
How many tools will break when these values change?
   </t>

   <t>
How many programs will fail silently when these values change?
   </t>

   <t>
This is precisely why Multihash was created. It was designed for
seamlessly upgrading systems that depend on cryptographic hashes.
   </t>

   <t>
When using Multihash, a system warns the consumers of its hash values that
these may have to be upgraded in case of a break. Even though the system
may still only use a single hash function at a time, the use of multihash
makes it clear to applications that hash values may use different hash
functions or be longer in the future. Tooling, applications, and scripts
can avoid making assumptions about the length, and read it from the
multihash value instead. This way, the vast majority of tooling – which
may not do any checking of hashes – would not have to be upgraded at all.
This vastly simplifies the upgrade process, avoiding the waste of hundreds
or thousands of software engineering hours, deep frustrations, and high
blood pressure.
   </t>

 </section>

 <section anchor="components" title="The Multihash Fields">
  <t>
INTRO
  </t>

   <section anchor="core-data-types" title="Multihash Core Data Types">
    <t>
The following section details the core data types used by the Multihash
data format.
    </t>

    <section anchor="cdt-uvi" title="unsigned variable integer">
     <t>
A data type that enables one to express an unsigned integer of variable length.
     </t>

     <t>
When encoding an unsigned variable integer, the unsigned integer is serialized
seven bits at a time, starting with the least significant bits. The most
significant bit in each output byte intecates if there is a
continuation byte. It is not possible to express a signed integer with this
data type.
     </t>


   <texttable anchor="mh-uvi-examples" title="Examples of Unsigned Variable Integers">
    <ttcol align='center'>Value</ttcol>
    <ttcol align='right'>Encoding (bits)</ttcol>
    <c>1</c><c>00000001</c>
    <c>127</c><c>01111111</c>
    <c>128</c><c>10000000 00000001</c>
    <c>255</c><c>11111111 00000001</c>
    <c>300</c><c>10101100 00000010</c>
    <c>16384</c><c>10000000 10000000 00000001</c>
   </texttable>

    <t>
Implementations MUST restrict the size of the varint to a max of nine bytes
(63 bits). In order to avoid memory attacks on the encoding, the
aforementioned practical maximum length of of nine bytes is used. There is
no theoretical limit, and future specs can grow this number if it is truly
necessary to have code or length values larger than 2^31.
    </t>

    </section>

   </section>

</section>

</middle>
<back>
 <references title="Normative References">
  &rfc2119;
  &rfc4648;
  &rfc6376;
  &rfc7230;
  &rfc7235;
  &jwa;
 </references>
 <references title="Informative References">
  &rfc2617;
  &rfc3230;
  &rfc3447;
  &rfc5246;
  &rfc6749;
 </references>

 <section anchor="appendix-a" title="Security Considerations">
  <t>
There are a number of security considerations to take into account when
implementing or utilizing this specification.

TBD
  </t>
 </section>

 <section anchor="appendix-c" title="Test Values">
  <t>
  </t>

  <section anchor="default-test" title="Default Test">
   <t>
TBD
   </t>
 </section>
 </section>

 <section anchor="acknowledgements" title="Acknowledgements">
  <t>
The editors would like to thank the following individuals for feedback on and
implementations of the specification (in alphabetical order):

  </t>
 </section>
 <section anchor="appendix-d" title="IANA Considerations">
  <section anchor="mh-registry" title="The Multihash Algorithms Registry">
   <t>
The following initial entries should be added to the Multihash
Algorithms Registry to be created and maintained at (the suggested URI)
<eref target="http://www.iana.org/assignments/multihash-algorithms">
http://www.iana.org/assignments/multihash-algorithms</eref>:
   </t>

   <texttable anchor="mh-registry-table" title="Multihash Algorithms Registry">
    <ttcol align='center'>Codec</ttcol>
    <ttcol align='center'>Identifier (hex)</ttcol>
    <ttcol align='center'>Status</ttcol>
    <ttcol align='center'>Specification</ttcol>
    <c>identity</c><c>0x00</c><c>active</c><c></c>
    <c>md4</c><c>0xd4</c><c>deprecated</c><c></c>
   </texttable>

   <t>
NOTE: The most up to date place for developers to find the table above is
<eref target="https://github.com/multiformats/multihash/blob/master/hashtable.csv">
https://github.com/multiformats/multihash/blob/master/hashtable.csv</eref>.
   </t>

  </section>

 </section>
</back>
</rfc>
